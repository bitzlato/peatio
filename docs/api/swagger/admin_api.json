{
  "info": {
    "title": "Peatio Admin API v2",
    "description": "Admin API high privileged API with RBAC.",
    "contact": {
      "name": "bitzlato.com",
      "email": "support@bitzlato.com",
      "url": "https://bitzlato.com"
    },
    "license": {
      "url": "https://github.com/openware/peatio/blob/master/LICENSE.md"
    },
    "version": "3.0.0"
  },
  "swagger": "2.0",
  "produces": [
    "application/json"
  ],
  "host": "localhost:3000",
  "basePath": "/api/v2/admin/peatio",
  "tags": [
    {
      "name": "api",
      "description": "Operations about apis"
    }
  ],
  "paths": {
    "/api/v2/admin/peatio/blockchains/process_block": {
      "post": {
        "description": "Process blockchain's block.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "id",
            "description": "Unique blockchain identifier in database.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "block_number",
            "description": "The id of a particular block on blockchain",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Process blockchain's block.",
            "schema": {
              "$ref": "#/definitions/Blockchain"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "postApiV2AdminPeatioBlockchainsProcessBlock"
      }
    },
    "/api/v2/admin/peatio/blockchains/update": {
      "post": {
        "description": "Update blockchain.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "id",
            "description": "Unique blockchain identifier in database.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "key",
            "description": "Unique key to identify blockchain.",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "name",
            "description": "A name to identify blockchain.",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "client",
            "description": "Integrated blockchain client.",
            "type": "string",
            "enum": [
              "bitcoin",
              "geth",
              "parity",
              "dash",
              "litecoin",
              "bitcoincash",
              "ripple",
              "bitgo",
              "electrum"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "server",
            "description": "Blockchain server url",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "height",
            "description": "The number of blocks preceding a particular block on blockchain.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "explorer_transaction",
            "description": "Blockchain explorer transaction template.",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "explorer_address",
            "description": "Blockchain explorer address template.",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "status",
            "description": "Blockchain status (active/disabled).",
            "type": "string",
            "enum": [
              "active",
              "disabled"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "min_confirmations",
            "description": "Minimum number of confirmations.",
            "type": "integer",
            "format": "int32",
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Update blockchain.",
            "schema": {
              "$ref": "#/definitions/Blockchain"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "postApiV2AdminPeatioBlockchainsUpdate"
      }
    },
    "/api/v2/admin/peatio/blockchains/new": {
      "post": {
        "description": "Create new blockchain.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "key",
            "description": "Unique key to identify blockchain.",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "name",
            "description": "A name to identify blockchain.",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "client",
            "description": "Integrated blockchain client.",
            "type": "string",
            "enum": [
              "bitcoin",
              "geth",
              "parity",
              "dash",
              "litecoin",
              "bitcoincash",
              "ripple",
              "bitgo",
              "electrum"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "height",
            "description": "The number of blocks preceding a particular block on blockchain.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "explorer_transaction",
            "description": "Blockchain explorer transaction template.",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "explorer_address",
            "description": "Blockchain explorer address template.",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "server",
            "description": "Blockchain server url",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "status",
            "description": "Blockchain status (active/disabled).",
            "type": "string",
            "default": "active",
            "enum": [
              "active",
              "disabled"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "min_confirmations",
            "description": "Minimum number of confirmations.",
            "type": "integer",
            "format": "int32",
            "default": 6,
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Create new blockchain.",
            "schema": {
              "$ref": "#/definitions/Blockchain"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "postApiV2AdminPeatioBlockchainsNew"
      }
    },
    "/api/v2/admin/peatio/blockchains/{id}/latest_block": {
      "get": {
        "description": "Get a latest blockchain block.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Unique blockchain identifier in database.",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get a latest blockchain block."
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioBlockchainsIdLatestBlock"
      }
    },
    "/api/v2/admin/peatio/blockchains/{id}": {
      "get": {
        "description": "Get a blockchain.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Unique blockchain identifier in database.",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get a blockchain.",
            "schema": {
              "$ref": "#/definitions/Blockchain"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioBlockchainsId"
      }
    },
    "/api/v2/admin/peatio/blockchains/clients": {
      "get": {
        "description": "Get available blockchain clients.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get available blockchain clients."
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioBlockchainsClients"
      }
    },
    "/api/v2/admin/peatio/blockchains": {
      "get": {
        "description": "Get all blockchains, result is paginated.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "key",
            "description": "Unique key to identify blockchain.",
            "type": "string",
            "enum": [
              "btc-testnet",
              "eth-mainet",
              "eth-rinkeby",
              "prt-kovan"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "client",
            "description": "Integrated blockchain client.",
            "type": "string",
            "enum": [
              "bitcoin",
              "geth",
              "parity",
              "dash",
              "litecoin",
              "bitcoincash",
              "ripple",
              "bitgo",
              "electrum"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "status",
            "description": "Blockchain status (active/disabled).",
            "type": "string",
            "enum": [
              "active",
              "disabled"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "name",
            "description": "A name to identify blockchain.",
            "type": "string",
            "enum": [
              "Ethereum Kovan",
              "Ethereum Rinkeby",
              "Ethereum Mainet",
              "Bitcoin Testnet"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned paginations. Defaults to 100.",
            "type": "integer",
            "format": "int32",
            "default": 100,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Specify the page of paginated results.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "ordering",
            "description": "If set, returned values will be sorted in specific order, defaults to 'asc'.",
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "Name of the field, which result will be ordered by.",
            "type": "string",
            "default": "id",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get all blockchains, result is paginated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Blockchain"
              }
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioBlockchains"
      }
    },
    "/api/v2/admin/peatio/adjustments/action": {
      "post": {
        "description": "Accepts adjustment and creates operations or reject adjustment.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "id",
            "description": "Unique adjustment identifier in database.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "action",
            "description": "Adjustment action all available actions: [:accept, :reject]",
            "type": "string",
            "enum": [
              "accept",
              "reject"
            ],
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Accepts adjustment and creates operations or reject adjustment.",
            "schema": {
              "$ref": "#/definitions/Adjustment"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "postApiV2AdminPeatioAdjustmentsAction"
      }
    },
    "/api/v2/admin/peatio/adjustments/new": {
      "post": {
        "description": "Create new adjustment.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "reason",
            "description": "Adjustment reason.",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "description",
            "description": "Adjustment description.",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "category",
            "description": "Adjustment category",
            "type": "string",
            "enum": [
              "asset_registration",
              "investment",
              "minting_token",
              "balance_anomaly",
              "misc",
              "refund",
              "compensation",
              "incentive",
              "bank_fees",
              "bank_interest",
              "minor"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "amount",
            "description": "Adjustment amount.",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "currency_id",
            "description": "Adjustment currency ID.",
            "type": "string",
            "enum": [
              "btc",
              "eth",
              "trst",
              "usd"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "asset_account_code",
            "description": "Adjustment asset account code.",
            "type": "integer",
            "format": "int32",
            "enum": [
              102,
              101
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "receiving_account_code",
            "description": "Adjustment receiving account code.",
            "type": "integer",
            "format": "int32",
            "enum": [
              201,
              202,
              211,
              212,
              301,
              302,
              401,
              402
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "receiving_member_uid",
            "description": "Adjustment receiving account code.",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Create new adjustment.",
            "schema": {
              "$ref": "#/definitions/Adjustment"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "postApiV2AdminPeatioAdjustmentsNew"
      }
    },
    "/api/v2/admin/peatio/adjustments/{id}": {
      "get": {
        "description": "Get adjustment by ID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Adjsustment Identifier in Database",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get adjustment by ID",
            "schema": {
              "$ref": "#/definitions/Adjustment"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioAdjustmentsId"
      }
    },
    "/api/v2/admin/peatio/adjustments": {
      "get": {
        "description": "Get all adjustments, result is paginated.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "currency",
            "description": "Deposit currency id.",
            "type": "string",
            "enum": [
              "btc",
              "eth",
              "trst",
              "usd",
              "BTC",
              "ETH",
              "TRST",
              "USD"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "range",
            "description": "Date range picker, defaults to 'created'.",
            "type": "string",
            "default": "created",
            "enum": [
              "created",
              "updated",
              "completed"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "from",
            "description": "An integer represents the seconds elapsed since Unix epoch.If set, only entities FROM the time will be retrieved.",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "query",
            "name": "to",
            "description": "An integer represents the seconds elapsed since Unix epoch.If set, only entities BEFORE the time will be retrieved.",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned paginations. Defaults to 100.",
            "type": "integer",
            "format": "int32",
            "default": 100,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Specify the page of paginated results.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "ordering",
            "description": "If set, returned values will be sorted in specific order, defaults to 'asc'.",
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "Name of the field, which result will be ordered by.",
            "type": "string",
            "default": "id",
            "required": false
          },
          {
            "in": "query",
            "name": "state",
            "description": "Adjustment's state.",
            "type": "string",
            "enum": [
              "pending",
              "accepted",
              "rejected"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "category",
            "description": "Adjustment category",
            "type": "string",
            "enum": [
              "asset_registration",
              "investment",
              "minting_token",
              "balance_anomaly",
              "misc",
              "refund",
              "compensation",
              "incentive",
              "bank_fees",
              "bank_interest",
              "minor"
            ],
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get all adjustments, result is paginated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Adjustment"
              }
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioAdjustments"
      }
    },
    "/api/v2/admin/peatio/beneficiaries/actions": {
      "post": {
        "description": "Take an action on the beneficiary",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "id",
            "description": "Beneficiary Identifier in Database",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "action",
            "description": "Valid actions are [:activate, :archive].",
            "type": "string",
            "enum": [
              "activate",
              "archive"
            ],
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Take an action on the beneficiary",
            "schema": {
              "$ref": "#/definitions/Beneficiary"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "postApiV2AdminPeatioBeneficiariesActions"
      }
    },
    "/api/v2/admin/peatio/beneficiaries": {
      "get": {
        "description": "Get list of beneficiaries",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "uid",
            "description": "Member UID.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "ordering",
            "description": "If set, returned values will be sorted in specific order, defaults to 'asc'.",
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "Name of the field, which result will be ordered by.",
            "type": "string",
            "default": "id",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned paginations. Defaults to 100.",
            "type": "integer",
            "format": "int32",
            "default": 100,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Specify the page of paginated results.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "id",
            "description": "Beneficiary Identifier in Database",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "currency",
            "description": "Beneficiary currency code",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "state",
            "description": "Beneficiary state",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get list of beneficiaries",
            "schema": {
              "$ref": "#/definitions/Beneficiary"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioBeneficiaries"
      }
    },
    "/api/v2/admin/peatio/abilities": {
      "get": {
        "description": "Get all roles and permissions.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get all roles and permissions."
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioAbilities"
      }
    },
    "/api/v2/admin/peatio/orders/cancel": {
      "post": {
        "description": "Cancel all orders.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "market",
            "description": "Id has been renamed to symbol. This field will be deprecated soon.",
            "type": "string",
            "enum": [
              "btcusd"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "side",
            "description": "If present, only sell orders (asks) or buy orders (bids) will be cancelled.",
            "type": "string",
            "enum": [
              "sell",
              "buy"
            ],
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Cancel all orders."
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "postApiV2AdminPeatioOrdersCancel"
      }
    },
    "/api/v2/admin/peatio/orders/{id}/cancel": {
      "post": {
        "description": "Cancel an order.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Unique order id.",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Cancel an order."
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "postApiV2AdminPeatioOrdersIdCancel"
      }
    },
    "/api/v2/admin/peatio/orders": {
      "get": {
        "description": "Get all orders, result is paginated.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "market",
            "description": "Id has been renamed to symbol. This field will be deprecated soon.",
            "type": "string",
            "enum": [
              "btcusd"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "market_type",
            "description": "Market type.",
            "type": "string",
            "default": {
            },
            "enum": [
              "spot",
              "qe"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "state",
            "description": "Filter order by state.",
            "type": "string",
            "enum": [
              "pending",
              "wait",
              "done",
              "cancel",
              "reject"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "ord_type",
            "description": "Filter order by ord_type.",
            "type": "string",
            "enum": [
              "market",
              "limit"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "price",
            "description": "Price for each unit. e.g.If you want to sell/buy 1 btc at 3000 usd, the price is '3000.0'",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "query",
            "name": "origin_volume",
            "description": "The amount user want to sell/buy.An order could be partially executed,e.g. an order sell 5 btc can be matched with a buy 3 btc order,left 2 btc to be sold; in this case the order's volume would be '5.0',its remaining_volume would be '2.0', its executed volume is '3.0'.",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "query",
            "name": "type",
            "description": "Filter order by type.",
            "type": "string",
            "enum": [
              "sell",
              "buy"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "email",
            "description": "Member email.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "uid",
            "description": "Member UID.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "range",
            "description": "Date range picker, defaults to 'created'.",
            "type": "string",
            "default": "created",
            "enum": [
              "created",
              "updated",
              "completed"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "from",
            "description": "An integer represents the seconds elapsed since Unix epoch.If set, only entities FROM the time will be retrieved.",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "query",
            "name": "to",
            "description": "An integer represents the seconds elapsed since Unix epoch.If set, only entities BEFORE the time will be retrieved.",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned paginations. Defaults to 100.",
            "type": "integer",
            "format": "int32",
            "default": 100,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Specify the page of paginated results.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "ordering",
            "description": "If set, returned values will be sorted in specific order, defaults to 'asc'.",
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "Name of the field, which result will be ordered by.",
            "type": "string",
            "default": "id",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get all orders, result is paginated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioOrders"
      }
    },
    "/api/v2/admin/peatio/currencies/update": {
      "post": {
        "description": "Update currency.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "name",
            "description": "Currency name",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "deposit_fee",
            "description": "Currency deposit fee",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "min_deposit_amount",
            "description": "Minimal deposit amount",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "min_collection_amount",
            "description": "Minimal collection amount.",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "withdraw_fee",
            "description": "Currency withdraw fee",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "min_withdraw_amount",
            "description": "Minimal withdraw amount",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "withdraw_limit_24h",
            "description": "Currency 24h withdraw limit",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "withdraw_limit_72h",
            "description": "Currency 72h withdraw limit",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "options",
            "description": "Currency options.",
            "type": "json",
            "required": false
          },
          {
            "in": "formData",
            "name": "visible",
            "description": "Currency display status (true/false).",
            "type": "Boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "deposit_enabled",
            "description": "Currency deposit possibility status (true/false).",
            "type": "Boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "withdrawal_enabled",
            "description": "Currency withdrawal possibility status (true/false).",
            "type": "Boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "precision",
            "description": "Currency precision.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "price",
            "description": "Currency price.",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "icon_url",
            "description": "Currency icon",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "description",
            "description": "Currency description",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "homepage",
            "description": "Currency homepage",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "code",
            "description": "Unique currency code.",
            "type": "string",
            "enum": [
              "btc",
              "eth",
              "trst",
              "usd"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "position",
            "description": "Currency position.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "blockchain_key",
            "description": "Associated blockchain key which will perform transactions synchronization for currency.",
            "type": "string",
            "enum": [
              "btc-testnet",
              "eth-mainet",
              "eth-rinkeby",
              "prt-kovan"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "parent_id",
            "description": "Parent currency id.",
            "type": "string",
            "enum": [
              "btc",
              "eth"
            ],
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Update currency.",
            "schema": {
              "$ref": "#/definitions/Currency"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "postApiV2AdminPeatioCurrenciesUpdate"
      }
    },
    "/api/v2/admin/peatio/currencies/new": {
      "post": {
        "description": "Create new currency.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "name",
            "description": "Currency name",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "deposit_fee",
            "description": "Currency deposit fee",
            "type": "number",
            "format": "double",
            "default": 0.0,
            "required": false
          },
          {
            "in": "formData",
            "name": "min_deposit_amount",
            "description": "Minimal deposit amount",
            "type": "number",
            "format": "double",
            "default": 0.0,
            "required": false
          },
          {
            "in": "formData",
            "name": "min_collection_amount",
            "description": "Minimal collection amount.",
            "type": "number",
            "format": "double",
            "default": 0.0,
            "required": false
          },
          {
            "in": "formData",
            "name": "withdraw_fee",
            "description": "Currency withdraw fee",
            "type": "number",
            "format": "double",
            "default": 0.0,
            "required": false
          },
          {
            "in": "formData",
            "name": "min_withdraw_amount",
            "description": "Minimal withdraw amount",
            "type": "number",
            "format": "double",
            "default": 0.0,
            "required": false
          },
          {
            "in": "formData",
            "name": "withdraw_limit_24h",
            "description": "Currency 24h withdraw limit",
            "type": "number",
            "format": "double",
            "default": 0.0,
            "required": false
          },
          {
            "in": "formData",
            "name": "withdraw_limit_72h",
            "description": "Currency 72h withdraw limit",
            "type": "number",
            "format": "double",
            "default": 0.0,
            "required": false
          },
          {
            "in": "formData",
            "name": "options",
            "description": "Currency options.",
            "type": "json",
            "required": false
          },
          {
            "in": "formData",
            "name": "visible",
            "description": "Currency display status (true/false).",
            "type": "Boolean",
            "default": true,
            "required": false
          },
          {
            "in": "formData",
            "name": "deposit_enabled",
            "description": "Currency deposit possibility status (true/false).",
            "type": "Boolean",
            "default": true,
            "required": false
          },
          {
            "in": "formData",
            "name": "withdrawal_enabled",
            "description": "Currency withdrawal possibility status (true/false).",
            "type": "Boolean",
            "default": true,
            "required": false
          },
          {
            "in": "formData",
            "name": "precision",
            "description": "Currency precision.",
            "type": "integer",
            "format": "int32",
            "default": 8,
            "required": false
          },
          {
            "in": "formData",
            "name": "price",
            "description": "Currency price.",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "icon_url",
            "description": "Currency icon",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "description",
            "description": "Currency description",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "homepage",
            "description": "Currency homepage",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "code",
            "description": "Unique currency code.",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "type",
            "description": "Currency type",
            "type": "string",
            "default": "coin",
            "enum": [
              "fiat",
              "coin"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "base_factor",
            "description": "Currency base factor.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "position",
            "description": "Currency position.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "subunits",
            "description": "Fraction of the basic monetary unit.",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 18,
            "required": false
          },
          {
            "in": "formData",
            "name": "blockchain_key",
            "description": "Associated blockchain key which will perform transactions synchronization for currency.",
            "type": "string",
            "enum": [
              "btc-testnet",
              "eth-mainet",
              "eth-rinkeby",
              "prt-kovan"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "parent_id",
            "description": "Parent currency id.",
            "type": "string",
            "enum": [
              "btc",
              "eth"
            ],
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Create new currency.",
            "schema": {
              "$ref": "#/definitions/Currency"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "postApiV2AdminPeatioCurrenciesNew"
      }
    },
    "/api/v2/admin/peatio/currencies/{code}": {
      "get": {
        "description": "Get a currency.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "code",
            "description": "Unique currency code.",
            "type": "string",
            "enum": [
              "btc",
              "eth",
              "trst",
              "usd",
              "BTC",
              "ETH",
              "TRST",
              "USD"
            ],
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get a currency.",
            "schema": {
              "$ref": "#/definitions/Currency"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioCurrenciesCode"
      }
    },
    "/api/v2/admin/peatio/currencies": {
      "get": {
        "description": "Get list of currencies",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "description": "Currency type",
            "type": "string",
            "enum": [
              "fiat",
              "coin"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned paginations. Defaults to 100.",
            "type": "integer",
            "format": "int32",
            "default": 100,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Specify the page of paginated results.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "ordering",
            "description": "If set, returned values will be sorted in specific order, defaults to 'asc'.",
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "Name of the field, which result will be ordered by.",
            "type": "string",
            "default": "position",
            "required": false
          },
          {
            "in": "query",
            "name": "deposit_enabled",
            "description": "Currency deposit possibility status (true/false).",
            "type": "Boolean",
            "required": false
          },
          {
            "in": "query",
            "name": "withdrawal_enabled",
            "description": "Currency withdrawal possibility status (true/false).",
            "type": "Boolean",
            "required": false
          },
          {
            "in": "query",
            "name": "visible",
            "description": "Currency display status (true/false).",
            "type": "Boolean",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get list of currencies",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Currency"
              }
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioCurrencies"
      }
    },
    "/api/v2/admin/peatio/markets/update": {
      "post": {
        "description": "Update market.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "amount_precision",
            "description": "Precision for order amount.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "price_precision",
            "description": "Precision for order price.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "max_price",
            "description": "Maximum order price.",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "data",
            "description": "Market additional data.",
            "type": "json",
            "required": false
          },
          {
            "in": "formData",
            "name": "state",
            "description": "Market state defines if user can see/trade on current market.",
            "type": "string",
            "enum": [
              "enabled",
              "disabled",
              "hidden",
              "locked",
              "sale",
              "presale"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "id",
            "description": "Id has been renamed to symbol. This field will be deprecated soon.",
            "type": "string",
            "enum": [
              "btcusd"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "symbol",
            "description": "Unique market ticker symbol. It's always in the form of xxxyyy,where xxx is the base currency code, yyy is the quotecurrency code, e.g. 'btcusd'. All available markets canbe found at /api/v2/markets.",
            "type": "string",
            "enum": [
              "btcusd"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "type",
            "description": "",
            "type": "string",
            "default": {
            },
            "enum": [
              "spot",
              "qe"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "engine_id",
            "description": "Engine id for this market.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "position",
            "description": "Market position.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "min_price",
            "description": "Minimum order price.",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "min_amount",
            "description": "Minimum order amount.",
            "type": "number",
            "format": "double",
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Update market.",
            "schema": {
              "$ref": "#/definitions/Market"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "postApiV2AdminPeatioMarketsUpdate"
      }
    },
    "/api/v2/admin/peatio/markets/new": {
      "post": {
        "description": "Create new market.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "amount_precision",
            "description": "Precision for order amount.",
            "type": "integer",
            "format": "int32",
            "default": 4,
            "required": false
          },
          {
            "in": "formData",
            "name": "price_precision",
            "description": "Precision for order price.",
            "type": "integer",
            "format": "int32",
            "default": 4,
            "required": false
          },
          {
            "in": "formData",
            "name": "max_price",
            "description": "Maximum order price.",
            "type": "number",
            "format": "double",
            "default": 0.0,
            "required": false
          },
          {
            "in": "formData",
            "name": "data",
            "description": "Market additional data.",
            "type": "json",
            "required": false
          },
          {
            "in": "formData",
            "name": "state",
            "description": "Market state defines if user can see/trade on current market.",
            "type": "string",
            "default": "enabled",
            "enum": [
              "enabled",
              "disabled",
              "hidden",
              "locked",
              "sale",
              "presale"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "base_currency",
            "description": "Market Base unit.",
            "type": "string",
            "enum": [
              "btc",
              "eth",
              "trst",
              "usd"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "quote_currency",
            "description": "Market Quote unit.",
            "type": "string",
            "enum": [
              "btc",
              "eth",
              "trst",
              "usd"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "min_price",
            "description": "Minimum order price.",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "min_amount",
            "description": "Minimum order amount.",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "type",
            "description": "",
            "type": "string",
            "default": {
            },
            "enum": [
              "spot",
              "qe"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "engine_id",
            "description": "Engine id for this market.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "position",
            "description": "Market position.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "engine_name",
            "description": "Engine name",
            "type": "string",
            "enum": [
              "peatio-default-engine",
              "local-finex-spot-engine",
              "opendax-finex-spote-engine"
            ],
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Create new market.",
            "schema": {
              "$ref": "#/definitions/Market"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "postApiV2AdminPeatioMarketsNew"
      }
    },
    "/api/v2/admin/peatio/markets/{symbol}": {
      "get": {
        "description": "Get market.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "symbol",
            "description": "Unique market ticker symbol. It's always in the form of xxxyyy,where xxx is the base currency code, yyy is the quotecurrency code, e.g. 'btcusd'. All available markets canbe found at /api/v2/markets.",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "type",
            "description": "",
            "type": "string",
            "default": {
            },
            "enum": [
              "spot",
              "qe"
            ],
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get market.",
            "schema": {
              "$ref": "#/definitions/Market"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioMarketsSymbol"
      }
    },
    "/api/v2/admin/peatio/markets": {
      "get": {
        "description": "Get all markets, result is paginated.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned paginations. Defaults to 100.",
            "type": "integer",
            "format": "int32",
            "default": 100,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Specify the page of paginated results.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "type",
            "description": "",
            "type": "string",
            "default": {
            },
            "enum": [
              "spot",
              "qe"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "ordering",
            "description": "If set, returned values will be sorted in specific order, defaults to 'asc'.",
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "Name of the field, which result will be ordered by.",
            "type": "string",
            "default": "position",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get all markets, result is paginated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Market"
              }
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioMarkets"
      }
    },
    "/api/v2/admin/peatio/wallets/currencies": {
      "delete": {
        "description": "Delete currency from the wallet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "description": "Unique wallet identifier in database.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "query",
            "name": "currencies",
            "description": "Wallet currency code.",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Delete currency from the wallet",
            "schema": {
              "$ref": "#/definitions/Wallet"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "deleteApiV2AdminPeatioWalletsCurrencies"
      },
      "post": {
        "description": "Add currency to the wallet",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "id",
            "description": "Unique wallet identifier in database.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "currencies",
            "description": "Wallet currency code.",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Add currency to the wallet",
            "schema": {
              "$ref": "#/definitions/Wallet"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "postApiV2AdminPeatioWalletsCurrencies"
      }
    },
    "/api/v2/admin/peatio/wallets/update": {
      "post": {
        "description": "Update wallet.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "max_balance",
            "description": "Wallet max balance.",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "status",
            "description": "Wallet status (active/disabled).",
            "type": "string",
            "enum": [
              "active",
              "disabled"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "id",
            "description": "Unique wallet identifier in database.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "blockchain_key",
            "description": "Wallet blockchain key.",
            "type": "string",
            "enum": [
              "btc-testnet",
              "eth-mainet",
              "eth-rinkeby",
              "prt-kovan"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "name",
            "description": "Wallet name.",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "address",
            "description": "Wallet address.",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "kind",
            "description": "Kind of wallet 'deposit','fee','hot','warm' or 'cold'.",
            "type": "string",
            "enum": [
              "deposit",
              "fee",
              "hot",
              "warm",
              "cold"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "gateway",
            "description": "Wallet gateway.",
            "type": "string",
            "enum": [
              "bitcoind",
              "geth",
              "parity",
              "gnosis",
              "ow_hdwallet",
              "opendax",
              "opendax_cloud",
              "dashd",
              "litecoind",
              "bitcoincashd",
              "rippled",
              "bitgo",
              "electrum"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "currencies",
            "description": "Wallet currency code.",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "settings",
            "description": "Wallet settings",
            "type": "json",
            "required": false
          },
          {
            "in": "formData",
            "name": "settings[uri]",
            "description": "Wallet uri setting",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "settings[secret]",
            "description": "Wallet secret setting",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Update wallet.",
            "schema": {
              "$ref": "#/definitions/Wallet"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "postApiV2AdminPeatioWalletsUpdate"
      }
    },
    "/api/v2/admin/peatio/wallets/new": {
      "post": {
        "description": "Creates new wallet.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "max_balance",
            "description": "Wallet max balance.",
            "type": "number",
            "format": "double",
            "default": 0.0,
            "required": false
          },
          {
            "in": "formData",
            "name": "status",
            "description": "Wallet status (active/disabled).",
            "type": "string",
            "default": "active",
            "enum": [
              "active",
              "disabled"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "blockchain_key",
            "description": "Wallet blockchain key.",
            "type": "string",
            "enum": [
              "btc-testnet",
              "eth-mainet",
              "eth-rinkeby",
              "prt-kovan"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "name",
            "description": "Wallet name.",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "address",
            "description": "Wallet address.",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "currencies",
            "description": "Wallet currency code.",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "currency",
            "description": "Wallet currency code.",
            "type": "string",
            "enum": [
              "btc",
              "eth",
              "trst",
              "usd"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "kind",
            "description": "Kind of wallet 'deposit','fee','hot','warm' or 'cold'.",
            "type": "string",
            "enum": [
              "deposit",
              "fee",
              "hot",
              "warm",
              "cold"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "gateway",
            "description": "Wallet gateway.",
            "type": "string",
            "enum": [
              "bitcoind",
              "geth",
              "parity",
              "gnosis",
              "ow_hdwallet",
              "opendax",
              "opendax_cloud",
              "dashd",
              "litecoind",
              "bitcoincashd",
              "rippled",
              "bitgo",
              "electrum"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "settings",
            "description": "Wallet settings (uri, secret)",
            "type": "json",
            "required": false
          },
          {
            "in": "formData",
            "name": "settings[uri]",
            "description": "Wallet uri setting",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "settings[secret]",
            "description": "Wallet secret setting",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Creates new wallet.",
            "schema": {
              "$ref": "#/definitions/Wallet"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "postApiV2AdminPeatioWalletsNew"
      }
    },
    "/api/v2/admin/peatio/wallets/{id}": {
      "get": {
        "description": "Get a wallet.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Unique wallet identifier in database.",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get a wallet.",
            "schema": {
              "$ref": "#/definitions/Wallet"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioWalletsId"
      }
    },
    "/api/v2/admin/peatio/wallets/gateways": {
      "get": {
        "description": "List wallet gateways.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List wallet gateways."
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioWalletsGateways"
      }
    },
    "/api/v2/admin/peatio/wallets/kinds": {
      "get": {
        "description": "List wallet kinds.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List wallet kinds."
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioWalletsKinds"
      }
    },
    "/api/v2/admin/peatio/wallets": {
      "get": {
        "description": "Get all wallets, result is paginated.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "blockchain_key",
            "description": "Wallet blockchain key.",
            "type": "string",
            "enum": [
              "btc-testnet",
              "eth-mainet",
              "eth-rinkeby",
              "prt-kovan"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "kind",
            "description": "Kind of wallet 'deposit','fee','hot','warm' or 'cold'.",
            "type": "string",
            "enum": [
              "deposit",
              "fee",
              "hot",
              "warm",
              "cold"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "currencies",
            "description": "Wallet currency code.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned paginations. Defaults to 100.",
            "type": "integer",
            "format": "int32",
            "default": 100,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Specify the page of paginated results.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "ordering",
            "description": "If set, returned values will be sorted in specific order, defaults to 'asc'.",
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "Name of the field, which result will be ordered by.",
            "type": "string",
            "default": "id",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get all wallets, result is paginated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Wallet"
              }
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioWallets"
      }
    },
    "/api/v2/admin/peatio/deposits/{id}/refund": {
      "post": {
        "description": "Creates new crypto refund",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Deposit id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "address",
            "description": "Refund address",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Creates new crypto refund",
            "schema": {
              "$ref": "#/definitions/Refund"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "postApiV2AdminPeatioDepositsIdRefund"
      }
    },
    "/api/v2/admin/peatio/deposits/new": {
      "post": {
        "description": "Creates new fiat deposit .",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "uid",
            "description": "Deposit member uid.",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "currency",
            "description": "Deposit currency id.",
            "type": "string",
            "enum": [
              "usd",
              "USD"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "amount",
            "description": "Deposit amount.",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "tid",
            "description": "Deposit tid.",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Creates new fiat deposit .",
            "schema": {
              "$ref": "#/definitions/Deposit"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "postApiV2AdminPeatioDepositsNew"
      }
    },
    "/api/v2/admin/peatio/deposits/actions": {
      "post": {
        "description": "Take an action on the deposit.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "id",
            "description": "Unique deposit id.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "action",
            "description": "Valid actions are [:cancel, :reject, :accept, :skip, :process, :fee_process, :dispatch, :refund].",
            "type": "string",
            "enum": [
              "cancel",
              "reject",
              "accept",
              "skip",
              "process",
              "fee_process",
              "dispatch",
              "refund"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "fees",
            "description": "Process deposit collection with collecting fees or not",
            "type": "Boolean",
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Take an action on the deposit.",
            "schema": {
              "$ref": "#/definitions/Deposit"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "postApiV2AdminPeatioDepositsActions"
      }
    },
    "/api/v2/admin/peatio/deposits": {
      "get": {
        "description": "Get all deposits, result is paginated.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "state",
            "description": "Deposit state.",
            "type": "string",
            "enum": [
              "submitted",
              "canceled",
              "rejected",
              "accepted",
              "aml_processing",
              "aml_suspicious",
              "processing",
              "skipped",
              "collected",
              "fee_processing"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "id",
            "description": "Unique deposit id.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "txid",
            "description": "Deposit transaction id.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "address",
            "description": "Deposit blockchain address.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "tid",
            "description": "Deposit tid.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "email",
            "description": "The deposit member email.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "uid",
            "description": "Member UID.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "currency",
            "description": "Deposit currency id.",
            "type": "string",
            "enum": [
              "btc",
              "eth",
              "trst",
              "usd",
              "BTC",
              "ETH",
              "TRST",
              "USD"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "type",
            "description": "Currency type",
            "type": "string",
            "enum": [
              "fiat",
              "coin"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "range",
            "description": "Date range picker, defaults to 'created'.",
            "type": "string",
            "default": "created",
            "enum": [
              "created",
              "updated",
              "completed"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "from",
            "description": "An integer represents the seconds elapsed since Unix epoch.If set, only entities FROM the time will be retrieved.",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "query",
            "name": "to",
            "description": "An integer represents the seconds elapsed since Unix epoch.If set, only entities BEFORE the time will be retrieved.",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned paginations. Defaults to 100.",
            "type": "integer",
            "format": "int32",
            "default": 100,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Specify the page of paginated results.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "ordering",
            "description": "If set, returned values will be sorted in specific order, defaults to 'asc'.",
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "Name of the field, which result will be ordered by.",
            "type": "string",
            "default": "id",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get all deposits, result is paginated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Deposit"
              }
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioDeposits"
      }
    },
    "/api/v2/admin/peatio/deposit_address": {
      "post": {
        "description": "Returns deposit address for account you want to deposit to by currency and uid.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "uid",
            "description": "Deposit member uid.",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "currency",
            "description": "Deposit currency id.",
            "type": "string",
            "enum": [
              "btc",
              "eth",
              "trst",
              "usd"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "address_format",
            "description": "Address format legacy/cash",
            "type": "string",
            "enum": [
              "legacy",
              "cash"
            ],
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Returns deposit address for account you want to deposit to by currency and uid.",
            "schema": {
              "$ref": "#/definitions/Deposit"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "postApiV2AdminPeatioDepositAddress"
      }
    },
    "/api/v2/admin/peatio/withdraws": {
      "put": {
        "description": "Update withdraw request",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "id",
            "description": "The withdrawal id.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "metadata",
            "description": "Optional metadata to be applied to the transaction.",
            "type": "json",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Update withdraw request",
            "schema": {
              "$ref": "#/definitions/Withdraw"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "putApiV2AdminPeatioWithdraws"
      },
      "get": {
        "description": "Get all withdraws, result is paginated.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "state",
            "description": "The withdrawal state.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "id",
            "description": "The withdrawal id.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "txid",
            "description": "The withdrawal transaction id.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "tid",
            "description": "Withdraw tid.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "confirmations",
            "description": "Number of confirmations.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "rid",
            "description": "The beneficiary ID or wallet address on the Blockchain.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "wallet_type",
            "description": "Select withdraw that can be processed from wallets with given type e.g. patiry",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "uid",
            "description": "Member UID.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "currency",
            "description": "Deposit currency id.",
            "type": "string",
            "enum": [
              "btc",
              "eth",
              "trst",
              "usd",
              "BTC",
              "ETH",
              "TRST",
              "USD"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "type",
            "description": "Currency type",
            "type": "string",
            "enum": [
              "fiat",
              "coin"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "range",
            "description": "Date range picker, defaults to 'created'.",
            "type": "string",
            "default": "created",
            "enum": [
              "created",
              "updated",
              "completed"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "from",
            "description": "An integer represents the seconds elapsed since Unix epoch.If set, only entities FROM the time will be retrieved.",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "query",
            "name": "to",
            "description": "An integer represents the seconds elapsed since Unix epoch.If set, only entities BEFORE the time will be retrieved.",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned paginations. Defaults to 100.",
            "type": "integer",
            "format": "int32",
            "default": 100,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Specify the page of paginated results.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "ordering",
            "description": "If set, returned values will be sorted in specific order, defaults to 'asc'.",
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "Name of the field, which result will be ordered by.",
            "type": "string",
            "default": "id",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get all withdraws, result is paginated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Withdraw"
              }
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioWithdraws"
      }
    },
    "/api/v2/admin/peatio/withdraws/actions": {
      "post": {
        "description": "Take an action on the withdrawal.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "id",
            "description": "The withdrawal id.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "action",
            "description": "Valid actions are [:accept, :cancel, :reject, :process, :load, :dispatch, :success, :skip, :fail, :err].",
            "type": "string",
            "enum": [
              "accept",
              "cancel",
              "reject",
              "process",
              "load",
              "dispatch",
              "success",
              "skip",
              "fail",
              "err"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "txid",
            "description": "The withdrawal transaction id.",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Take an action on the withdrawal.",
            "schema": {
              "$ref": "#/definitions/Withdraw"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "postApiV2AdminPeatioWithdrawsActions"
      }
    },
    "/api/v2/admin/peatio/withdraws/{id}": {
      "get": {
        "description": "Get withdraw by ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The withdrawal id.",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get withdraw by ID.",
            "schema": {
              "$ref": "#/definitions/Withdraw"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioWithdrawsId"
      }
    },
    "/api/v2/admin/peatio/trades/{id}": {
      "get": {
        "description": "Get a trade with detailed information.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Trade ID.",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get a trade with detailed information.",
            "schema": {
              "$ref": "#/definitions/Blockchain"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioTradesId"
      }
    },
    "/api/v2/admin/peatio/trades": {
      "get": {
        "description": "Get all trades, result is paginated.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "market",
            "description": "Id has been renamed to symbol. This field will be deprecated soon.",
            "type": "string",
            "enum": [
              "btcusd"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "market_type",
            "description": "",
            "type": "string",
            "default": {
            },
            "enum": [
              "spot",
              "qe"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "order_id",
            "description": "Unique order id.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "uid",
            "description": "Member UID.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "range",
            "description": "Date range picker, defaults to 'created'.",
            "type": "string",
            "default": "created",
            "enum": [
              "created",
              "updated",
              "completed"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "from",
            "description": "An integer represents the seconds elapsed since Unix epoch.If set, only entities FROM the time will be retrieved.",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "query",
            "name": "to",
            "description": "An integer represents the seconds elapsed since Unix epoch.If set, only entities BEFORE the time will be retrieved.",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned paginations. Defaults to 100.",
            "type": "integer",
            "format": "int32",
            "default": 100,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Specify the page of paginated results.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "ordering",
            "description": "If set, returned values will be sorted in specific order, defaults to 'asc'.",
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "Name of the field, which result will be ordered by.",
            "type": "string",
            "default": "id",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get all trades, result is paginated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Trade"
              }
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioTrades"
      }
    },
    "/api/v2/admin/peatio/assets": {
      "get": {
        "description": "Returns assets as a paginated collection.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "reference_type",
            "description": "The reference type for which operation was created.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "rid",
            "description": "The unique id of operation's reference, for which operation was created.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "code",
            "description": "Opeartion's code.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "currency",
            "description": "Deposit currency id.",
            "type": "string",
            "enum": [
              "btc",
              "eth",
              "trst",
              "usd",
              "BTC",
              "ETH",
              "TRST",
              "USD"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "range",
            "description": "Date range picker, defaults to 'created'.",
            "type": "string",
            "default": "created",
            "enum": [
              "created",
              "updated",
              "completed"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "from",
            "description": "An integer represents the seconds elapsed since Unix epoch.If set, only entities FROM the time will be retrieved.",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "query",
            "name": "to",
            "description": "An integer represents the seconds elapsed since Unix epoch.If set, only entities BEFORE the time will be retrieved.",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned paginations. Defaults to 100.",
            "type": "integer",
            "format": "int32",
            "default": 100,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Specify the page of paginated results.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "ordering",
            "description": "If set, returned values will be sorted in specific order, defaults to 'asc'.",
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "Name of the field, which result will be ordered by.",
            "type": "string",
            "default": "id",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Returns assets as a paginated collection.",
            "schema": {
              "$ref": "#/definitions/Operation"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioAssets"
      }
    },
    "/api/v2/admin/peatio/expenses": {
      "get": {
        "description": "Returns expenses as a paginated collection.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "reference_type",
            "description": "The reference type for which operation was created.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "rid",
            "description": "The unique id of operation's reference, for which operation was created.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "code",
            "description": "Opeartion's code.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "currency",
            "description": "Deposit currency id.",
            "type": "string",
            "enum": [
              "btc",
              "eth",
              "trst",
              "usd",
              "BTC",
              "ETH",
              "TRST",
              "USD"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "range",
            "description": "Date range picker, defaults to 'created'.",
            "type": "string",
            "default": "created",
            "enum": [
              "created",
              "updated",
              "completed"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "from",
            "description": "An integer represents the seconds elapsed since Unix epoch.If set, only entities FROM the time will be retrieved.",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "query",
            "name": "to",
            "description": "An integer represents the seconds elapsed since Unix epoch.If set, only entities BEFORE the time will be retrieved.",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned paginations. Defaults to 100.",
            "type": "integer",
            "format": "int32",
            "default": 100,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Specify the page of paginated results.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "ordering",
            "description": "If set, returned values will be sorted in specific order, defaults to 'asc'.",
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "Name of the field, which result will be ordered by.",
            "type": "string",
            "default": "id",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Returns expenses as a paginated collection.",
            "schema": {
              "$ref": "#/definitions/Operation"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioExpenses"
      }
    },
    "/api/v2/admin/peatio/revenues": {
      "get": {
        "description": "Returns revenues as a paginated collection.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "reference_type",
            "description": "The reference type for which operation was created.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "rid",
            "description": "The unique id of operation's reference, for which operation was created.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "code",
            "description": "Opeartion's code.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "currency",
            "description": "Deposit currency id.",
            "type": "string",
            "enum": [
              "btc",
              "eth",
              "trst",
              "usd",
              "BTC",
              "ETH",
              "TRST",
              "USD"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "range",
            "description": "Date range picker, defaults to 'created'.",
            "type": "string",
            "default": "created",
            "enum": [
              "created",
              "updated",
              "completed"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "from",
            "description": "An integer represents the seconds elapsed since Unix epoch.If set, only entities FROM the time will be retrieved.",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "query",
            "name": "to",
            "description": "An integer represents the seconds elapsed since Unix epoch.If set, only entities BEFORE the time will be retrieved.",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned paginations. Defaults to 100.",
            "type": "integer",
            "format": "int32",
            "default": 100,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Specify the page of paginated results.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "ordering",
            "description": "If set, returned values will be sorted in specific order, defaults to 'asc'.",
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "Name of the field, which result will be ordered by.",
            "type": "string",
            "default": "id",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Returns revenues as a paginated collection.",
            "schema": {
              "$ref": "#/definitions/Operation"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioRevenues"
      }
    },
    "/api/v2/admin/peatio/liabilities": {
      "get": {
        "description": "Returns liabilities as a paginated collection.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "uid",
            "description": "Member UID.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "reference_type",
            "description": "The reference type for which operation was created.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "rid",
            "description": "The unique id of operation's reference, for which operation was created.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "code",
            "description": "Opeartion's code.",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "query",
            "name": "currency",
            "description": "Deposit currency id.",
            "type": "string",
            "enum": [
              "btc",
              "eth",
              "trst",
              "usd",
              "BTC",
              "ETH",
              "TRST",
              "USD"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "range",
            "description": "Date range picker, defaults to 'created'.",
            "type": "string",
            "default": "created",
            "enum": [
              "created",
              "updated",
              "completed"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "from",
            "description": "An integer represents the seconds elapsed since Unix epoch.If set, only entities FROM the time will be retrieved.",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "query",
            "name": "to",
            "description": "An integer represents the seconds elapsed since Unix epoch.If set, only entities BEFORE the time will be retrieved.",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned paginations. Defaults to 100.",
            "type": "integer",
            "format": "int32",
            "default": 100,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Specify the page of paginated results.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "ordering",
            "description": "If set, returned values will be sorted in specific order, defaults to 'asc'.",
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "Name of the field, which result will be ordered by.",
            "type": "string",
            "default": "id",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Returns liabilities as a paginated collection.",
            "schema": {
              "$ref": "#/definitions/Operation"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioLiabilities"
      }
    },
    "/api/v2/admin/peatio/members/{uid}": {
      "put": {
        "description": "Set user group.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "description": "The shared user ID.",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "group",
            "description": "User gruop",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Set user group.",
            "schema": {
              "$ref": "#/definitions/Member"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "putApiV2AdminPeatioMembersUid"
      },
      "get": {
        "description": "Get a member.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "description": "The shared user ID.",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get a member.",
            "schema": {
              "$ref": "#/definitions/Member"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioMembersUid"
      }
    },
    "/api/v2/admin/peatio/members/groups": {
      "get": {
        "description": "Get available members groups.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get available members groups."
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioMembersGroups"
      }
    },
    "/api/v2/admin/peatio/members": {
      "get": {
        "description": "Get all members, result is paginated.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "state",
            "description": "Filter order by state.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "role",
            "description": "",
            "type": "string",
            "enum": [
              "superadmin",
              "admin",
              "technical",
              "accountant",
              "compliance",
              "support",
              "member",
              "broker",
              "trader",
              "maker",
              "sa_maker"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "group",
            "description": "",
            "type": "string",
            "enum": [
              "any",
              "vip-0",
              "vip-1",
              "vip-2",
              "vip-3"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "email",
            "description": "Member email.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "uid",
            "description": "Member UID.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "range",
            "description": "Date range picker, defaults to 'created'.",
            "type": "string",
            "default": "created",
            "enum": [
              "created",
              "updated",
              "completed"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "from",
            "description": "An integer represents the seconds elapsed since Unix epoch.If set, only entities FROM the time will be retrieved.",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "query",
            "name": "to",
            "description": "An integer represents the seconds elapsed since Unix epoch.If set, only entities BEFORE the time will be retrieved.",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned paginations. Defaults to 100.",
            "type": "integer",
            "format": "int32",
            "default": 100,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Specify the page of paginated results.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "ordering",
            "description": "If set, returned values will be sorted in specific order, defaults to 'asc'.",
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "Name of the field, which result will be ordered by.",
            "type": "string",
            "default": "id",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get all members, result is paginated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Member"
              }
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioMembers"
      }
    },
    "/api/v2/admin/peatio/trading_fees/delete": {
      "post": {
        "description": "It deletes trading fees record",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "id",
            "description": "Unique trading fee table identifier in database.",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "It deletes trading fees record",
            "schema": {
              "$ref": "#/definitions/TradingFee"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "postApiV2AdminPeatioTradingFeesDelete"
      }
    },
    "/api/v2/admin/peatio/trading_fees/update": {
      "post": {
        "description": "It updates trading fees record",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "id",
            "description": "Unique trading fee table identifier in database.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "maker",
            "description": "Market maker fee.",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "taker",
            "description": "Market taker fee.",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "group",
            "description": "Member group for define maker/taker fee.",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "market_id",
            "description": "Market id for define maker/taker fee.",
            "type": "string",
            "enum": [
              "btcusd",
              "any"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "market_type",
            "description": "",
            "type": "string",
            "default": {
            },
            "enum": [
              "spot",
              "qe"
            ],
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "It updates trading fees record",
            "schema": {
              "$ref": "#/definitions/TradingFee"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "postApiV2AdminPeatioTradingFeesUpdate"
      }
    },
    "/api/v2/admin/peatio/trading_fees/new": {
      "post": {
        "description": "It creates trading fees record",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "maker",
            "description": "Market maker fee.",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "taker",
            "description": "Market taker fee.",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "group",
            "description": "Member group for define maker/taker fee.",
            "type": "string",
            "default": "any",
            "required": false
          },
          {
            "in": "formData",
            "name": "market_id",
            "description": "Market id for define maker/taker fee.",
            "type": "string",
            "default": "any",
            "enum": [
              "btcusd",
              "any"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "market_type",
            "description": "",
            "type": "string",
            "default": {
            },
            "enum": [
              "spot",
              "qe"
            ],
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "It creates trading fees record",
            "schema": {
              "$ref": "#/definitions/TradingFee"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "postApiV2AdminPeatioTradingFeesNew"
      }
    },
    "/api/v2/admin/peatio/trading_fees": {
      "get": {
        "description": "Returns trading_fees table as paginated collection",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "group",
            "description": "Member group for define maker/taker fee.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "market_id",
            "description": "Market id for define maker/taker fee.",
            "type": "string",
            "enum": [
              "btcusd",
              "any"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "market_type",
            "description": "",
            "type": "string",
            "default": {
            },
            "enum": [
              "spot",
              "qe"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned paginations. Defaults to 100.",
            "type": "integer",
            "format": "int32",
            "default": 100,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Specify the page of paginated results.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "ordering",
            "description": "If set, returned values will be sorted in specific order, defaults to 'asc'.",
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "Name of the field, which result will be ordered by.",
            "type": "string",
            "default": "id",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Returns trading_fees table as paginated collection",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TradingFee"
              }
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioTradingFees"
      }
    },
    "/api/v2/admin/peatio/engines/update": {
      "post": {
        "description": "Update engine",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "id",
            "description": "Engine uniq id",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "name",
            "description": "Engine name",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "driver",
            "description": "Engine driver",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "key",
            "description": "Credentials for remote engine",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "secret",
            "description": "Credentials for remote engine",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "state",
            "description": "Engine state",
            "type": "string",
            "default": 1,
            "enum": [
              1,
              0
            ],
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Update engine",
            "schema": {
              "$ref": "#/definitions/Engine"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "postApiV2AdminPeatioEnginesUpdate"
      }
    },
    "/api/v2/admin/peatio/engines/new": {
      "post": {
        "description": "Create new engine.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "name",
            "description": "Engine name",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "driver",
            "description": "Engine driver",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "uid",
            "description": "Owner of a engine",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "key",
            "description": "Credentials for remote engine",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "secret",
            "description": "Credentials for remote engine",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "data",
            "description": "Metadata for engine",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Create new engine.",
            "schema": {
              "$ref": "#/definitions/Engine"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "postApiV2AdminPeatioEnginesNew"
      }
    },
    "/api/v2/admin/peatio/engines/{id}": {
      "get": {
        "description": "Get engine.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Engine uniq id",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get engine.",
            "schema": {
              "$ref": "#/definitions/Engine"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioEnginesId"
      }
    },
    "/api/v2/admin/peatio/engines": {
      "get": {
        "description": "Get all engine, result is paginated.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned paginations. Defaults to 100.",
            "type": "integer",
            "format": "int32",
            "default": 100,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Specify the page of paginated results.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "ordering",
            "description": "If set, returned values will be sorted in specific order, defaults to 'asc'.",
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "Name of the field, which result will be ordered by.",
            "type": "string",
            "default": "id",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get all engine, result is paginated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Engine"
              }
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioEngines"
      }
    },
    "/api/v2/admin/peatio/withdraw_limits/{id}": {
      "delete": {
        "description": "It deletes withdraw limits record",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Unique withdraw limit table identifier in database.",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "It deletes withdraw limits record",
            "schema": {
              "$ref": "#/definitions/WithdrawLimit"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "deleteApiV2AdminPeatioWithdrawLimitsId"
      }
    },
    "/api/v2/admin/peatio/withdraw_limits": {
      "put": {
        "description": "It updates withdraw limits record",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "id",
            "description": "Unique withdraw limit table identifier in database.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "limit_24_hour",
            "description": "24 hours withdraw limit.",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "limit_1_month",
            "description": "1 month withdraw limit.",
            "type": "number",
            "format": "double",
            "required": false
          },
          {
            "in": "formData",
            "name": "kyc_level",
            "description": "KYC level for define withdraw limits.",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "group",
            "description": "Member group for define withdraw limits.",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "It updates withdraw limits record",
            "schema": {
              "$ref": "#/definitions/WithdrawLimit"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "putApiV2AdminPeatioWithdrawLimits"
      },
      "post": {
        "description": "It creates withdraw limits record",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "limit_24_hour",
            "description": "24 hours withdraw limit.",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "limit_1_month",
            "description": "1 month withdraw limit.",
            "type": "number",
            "format": "double",
            "required": true
          },
          {
            "in": "formData",
            "name": "group",
            "description": "Member group for define withdraw limits.",
            "type": "string",
            "default": "any",
            "required": false
          },
          {
            "in": "formData",
            "name": "kyc_level",
            "description": "KYC level for define withdraw limits.",
            "type": "string",
            "default": "any",
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "It creates withdraw limits record",
            "schema": {
              "$ref": "#/definitions/WithdrawLimit"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "postApiV2AdminPeatioWithdrawLimits"
      },
      "get": {
        "description": "Returns withdraw limits table as paginated collection",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "group",
            "description": "Member group for define withdraw limits.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "kyc_level",
            "description": "KYC level for define withdraw limits.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned paginations. Defaults to 100.",
            "type": "integer",
            "format": "int32",
            "default": 100,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Specify the page of paginated results.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "ordering",
            "description": "If set, returned values will be sorted in specific order, defaults to 'asc'.",
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "Name of the field, which result will be ordered by.",
            "type": "string",
            "default": "id",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Returns withdraw limits table as paginated collection",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WithdrawLimit"
              }
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioWithdrawLimits"
      }
    },
    "/api/v2/admin/peatio/airdrops": {
      "post": {
        "description": "Process user airdrop",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "file",
            "description": "",
            "type": "file",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Process user airdrop"
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "postApiV2AdminPeatioAirdrops"
      }
    },
    "/api/v2/admin/peatio/internal_transfers": {
      "get": {
        "description": "Get all internal transfers.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "sender",
            "description": "Sender uid or username.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "receiver",
            "description": "Receiver uid or username.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "currency",
            "description": "Deposit currency id.",
            "type": "string",
            "enum": [
              "btc",
              "eth",
              "trst",
              "usd",
              "BTC",
              "ETH",
              "TRST",
              "USD"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned paginations. Defaults to 100.",
            "type": "integer",
            "format": "int32",
            "default": 100,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Specify the page of paginated results.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "range",
            "description": "Date range picker, defaults to 'created'.",
            "type": "string",
            "default": "created",
            "enum": [
              "created",
              "updated",
              "completed"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "from",
            "description": "An integer represents the seconds elapsed since Unix epoch.If set, only entities FROM the time will be retrieved.",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "query",
            "name": "to",
            "description": "An integer represents the seconds elapsed since Unix epoch.If set, only entities BEFORE the time will be retrieved.",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "query",
            "name": "ordering",
            "description": "If set, returned values will be sorted in specific order, defaults to 'asc'.",
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "Name of the field, which result will be ordered by.",
            "type": "string",
            "default": "id",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get all internal transfers.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InternalTransfer"
              }
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioInternalTransfers"
      }
    },
    "/api/v2/admin/peatio/whitelisted_smart_contracts/csv": {
      "post": {
        "description": "Process whitelisted smart contracts from csv",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "file",
            "description": "CSV file with whitelisted smart contracts data",
            "type": "file",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Process whitelisted smart contracts from csv",
            "schema": {
              "$ref": "#/definitions/WhitelistedSmartContract"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "postApiV2AdminPeatioWhitelistedSmartContractsCsv"
      }
    },
    "/api/v2/admin/peatio/whitelisted_smart_contracts": {
      "put": {
        "description": "Update whitelisted_smart_contract.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "id",
            "description": "Unique whitelisted smart contract identifier in database.",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "blockchain_key",
            "description": "Whitelisted smart contract blockchain key.",
            "type": "string",
            "enum": [
              "btc-testnet",
              "eth-mainet",
              "eth-rinkeby",
              "prt-kovan"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "description",
            "description": "Whitelisted smart contract description.",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "address",
            "description": "Whitelisted smart contract address.",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "state",
            "description": "Whitelisted smart contract status (active/disabled).",
            "type": "string",
            "enum": [
              "active",
              "disabled"
            ],
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Update whitelisted_smart_contract.",
            "schema": {
              "$ref": "#/definitions/WhitelistedSmartContract"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "putApiV2AdminPeatioWhitelistedSmartContracts"
      },
      "post": {
        "description": "Creates new whitelisted address.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "blockchain_key",
            "description": "Whitelisted smart contract blockchain key.",
            "type": "string",
            "enum": [
              "btc-testnet",
              "eth-mainet",
              "eth-rinkeby",
              "prt-kovan"
            ],
            "required": true
          },
          {
            "in": "formData",
            "name": "address",
            "description": "Whitelisted smart contract address.",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "description",
            "description": "Whitelisted smart contract description.",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "state",
            "description": "Whitelisted smart contract status (active/disabled).",
            "type": "string",
            "default": "active",
            "enum": [
              "active",
              "disabled"
            ],
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Creates new whitelisted address.",
            "schema": {
              "$ref": "#/definitions/WhitelistedSmartContract"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "postApiV2AdminPeatioWhitelistedSmartContracts"
      },
      "get": {
        "description": "Get all whitelisted addresses, result is paginated.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "blockchain_key",
            "description": "Whitelisted smart contract blockchain key.",
            "type": "string",
            "enum": [
              "btc-testnet",
              "eth-mainet",
              "eth-rinkeby",
              "prt-kovan"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned paginations. Defaults to 100.",
            "type": "integer",
            "format": "int32",
            "default": 100,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Specify the page of paginated results.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "ordering",
            "description": "If set, returned values will be sorted in specific order, defaults to 'asc'.",
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "Name of the field, which result will be ordered by.",
            "type": "string",
            "default": "id",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get all whitelisted addresses, result is paginated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WhitelistedSmartContract"
              }
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioWhitelistedSmartContracts"
      }
    },
    "/api/v2/admin/peatio/whitelisted_smart_contract/{id}": {
      "get": {
        "description": "Get a whitelisted address.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Unique whitelisted smart contract identifier in database.",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get a whitelisted address.",
            "schema": {
              "$ref": "#/definitions/WhitelistedSmartContract"
            }
          }
        },
        "tags": [
          "api"
        ],
        "operationId": "getApiV2AdminPeatioWhitelistedSmartContractId"
      }
    }
  },
  "definitions": {
    "Blockchain": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique blockchain identifier in database."
        },
        "key": {
          "type": "string",
          "description": "Unique key to identify blockchain."
        },
        "name": {
          "type": "string",
          "description": "A name to identify blockchain."
        },
        "client": {
          "type": "string",
          "description": "Integrated blockchain client."
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "The number of blocks preceding a particular block on blockchain."
        },
        "explorer_address": {
          "type": "string",
          "description": "Blockchain explorer address template."
        },
        "explorer_transaction": {
          "type": "string",
          "description": "Blockchain explorer transaction template."
        },
        "min_confirmations": {
          "type": "integer",
          "format": "int32",
          "description": "Minimum number of confirmations."
        },
        "status": {
          "type": "string",
          "description": "Blockchain status (active/disabled)."
        },
        "created_at": {
          "type": "string",
          "description": "Blockchain created time in iso8601 format."
        },
        "updated_at": {
          "type": "string",
          "description": "Blockchain updated time in iso8601 format."
        }
      },
      "description": "Get a trade with detailed information."
    },
    "Adjustment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique adjustment identifier in database."
        },
        "reason": {
          "type": "string",
          "description": "Adjustment reason."
        },
        "description": {
          "type": "string",
          "description": "Adjustment description."
        },
        "category": {
          "type": "string",
          "description": "Adjustment category"
        },
        "amount": {
          "type": "string",
          "description": "Adjustment amount."
        },
        "validator_uid": {
          "type": "integer",
          "format": "int32",
          "description": "Unique adjustment validator identifier in database."
        },
        "creator_uid": {
          "type": "integer",
          "format": "int32",
          "description": "Unique adjustment creator identifier in database."
        },
        "currency": {
          "type": "string",
          "description": "Adjustment currency ID."
        },
        "asset": {
          "$ref": "#/definitions/Operation"
        },
        "liability": {
          "$ref": "#/definitions/Operation"
        },
        "revenue": {
          "$ref": "#/definitions/Operation"
        },
        "expense": {
          "$ref": "#/definitions/Operation"
        },
        "state": {
          "type": "string",
          "description": "Adjustment's state."
        },
        "asset_account_code": {
          "type": "integer",
          "format": "int32",
          "description": "Adjustment asset account code."
        },
        "receiving_account_code": {
          "type": "string",
          "description": "Adjustment receiving account code."
        },
        "receiving_member_uid": {
          "type": "string",
          "description": "Adjustment receiving member uid."
        },
        "created_at": {
          "type": "string",
          "description": "The datetime when operation was created."
        },
        "updated_at": {
          "type": "string",
          "description": "The datetime when operation was updated."
        }
      },
      "description": "Get all adjustments, result is paginated."
    },
    "Operation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique operation identifier in database."
        },
        "code": {
          "type": "string",
          "description": "The Account code which this operation related to."
        },
        "currency": {
          "type": "string",
          "description": "Operation currency ID."
        },
        "credit": {
          "type": "string",
          "description": "Operation credit amount."
        },
        "debit": {
          "type": "string",
          "description": "Operation debit amount."
        },
        "uid": {
          "type": "string",
          "description": "The shared user ID."
        },
        "account_kind": {
          "type": "string",
          "description": "Operation's account kind (locked or main)."
        },
        "rid": {
          "type": "string",
          "description": "The id of operation reference."
        },
        "reference_type": {
          "type": "string",
          "description": "The type of operations."
        },
        "created_at": {
          "type": "string",
          "description": "The datetime when operation was created."
        }
      },
      "description": "Returns liabilities as a paginated collection."
    },
    "Beneficiary": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Beneficiary Identifier in Database"
        },
        "currency": {
          "type": "string",
          "description": "Beneficiary currency code."
        },
        "uid": {
          "type": "string",
          "description": "Beneficiary owner"
        },
        "name": {
          "type": "string",
          "description": "Human rememberable name which refer beneficiary."
        },
        "description": {
          "type": "string",
          "description": "Human rememberable description of beneficiary."
        },
        "data": {
          "type": "json",
          "description": "Bank Account details for fiat Beneficiary in JSON format.For crypto it's blockchain address."
        },
        "state": {
          "type": "string",
          "description": "Defines either beneficiary active - user can use it to withdraw moneyor pending - requires beneficiary activation with pin."
        },
        "sent_at": {
          "type": "string",
          "description": "Time when last pin was sent"
        }
      },
      "description": "Get list of beneficiaries"
    },
    "Order": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique order id."
        },
        "uuid": {
          "type": "string",
          "description": "Unique order UUID."
        },
        "side": {
          "type": "string",
          "description": "Either 'sell' or 'buy'."
        },
        "ord_type": {
          "type": "string",
          "description": "Type of order, either 'limit' or 'market'."
        },
        "price": {
          "type": "number",
          "format": "double",
          "description": "Price for each unit. e.g.If you want to sell/buy 1 btc at 3000 usd, the price is '3000.0'"
        },
        "avg_price": {
          "type": "number",
          "format": "double",
          "description": "Average execution price, average of price in trades."
        },
        "state": {
          "type": "string",
          "description": "One of 'wait', 'done', or 'cancel'.An order in 'wait' is an active order, waiting fulfillment;a 'done' order is an order fulfilled;'cancel' means the order has been canceled."
        },
        "market": {
          "type": "string",
          "description": "The market in which the order is placed, e.g. 'btcusd'.All available markets can be found at /api/v2/markets."
        },
        "market_type": {
          "type": "string",
          "description": "Market type."
        },
        "created_at": {
          "type": "string",
          "description": "Order create time in iso8601 format."
        },
        "updated_at": {
          "type": "string",
          "description": "Order updated time in iso8601 format."
        },
        "origin_volume": {
          "type": "number",
          "format": "double",
          "description": "The amount user want to sell/buy.An order could be partially executed,e.g. an order sell 5 btc can be matched with a buy 3 btc order,left 2 btc to be sold; in this case the order's volume would be '5.0',its remaining_volume would be '2.0', its executed volume is '3.0'."
        },
        "remaining_volume": {
          "type": "number",
          "format": "double",
          "description": "The remaining volume, see 'volume'."
        },
        "executed_volume": {
          "type": "number",
          "format": "double",
          "description": "The executed volume, see 'volume'."
        },
        "maker_fee": {
          "type": "number",
          "format": "double",
          "description": "Fee for maker."
        },
        "taker_fee": {
          "type": "number",
          "format": "double",
          "description": "Fee for taker."
        },
        "trades_count": {
          "type": "integer",
          "format": "int32",
          "description": "Count of trades."
        },
        "email": {
          "type": "string",
          "description": "The shared user email."
        },
        "uid": {
          "type": "string",
          "description": "The shared user ID."
        }
      },
      "description": "Get all orders, result is paginated."
    },
    "Currency": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Bitcoin",
          "description": "Currency name"
        },
        "description": {
          "type": "string",
          "example": "btc",
          "description": "Currency description"
        },
        "homepage": {
          "type": "string",
          "example": null,
          "description": "Currency homepage"
        },
        "parent_id": {
          "type": "string",
          "description": "Parent currency id."
        },
        "price": {
          "type": "number",
          "format": "double",
          "description": "Currency price."
        },
        "explorer_transaction": {
          "type": "string",
          "example": "https://testnet.blockchain.info/tx/",
          "description": "Currency transaction exprorer url template"
        },
        "explorer_address": {
          "type": "string",
          "example": "https://testnet.blockchain.info/address/",
          "description": "Currency address exprorer url template"
        },
        "type": {
          "type": "string",
          "example": "coin",
          "description": "Currency type"
        },
        "deposit_enabled": {
          "type": "string",
          "description": "Currency deposit possibility status (true/false)."
        },
        "withdrawal_enabled": {
          "type": "string",
          "description": "Currency withdrawal possibility status (true/false)."
        },
        "deposit_fee": {
          "type": "string",
          "example": "0.0",
          "description": "Currency deposit fee"
        },
        "min_deposit_amount": {
          "type": "string",
          "example": "0.0000356",
          "description": "Minimal deposit amount"
        },
        "withdraw_fee": {
          "type": "string",
          "example": "0.0",
          "description": "Currency withdraw fee"
        },
        "min_withdraw_amount": {
          "type": "string",
          "example": "0.0",
          "description": "Minimal withdraw amount"
        },
        "withdraw_limit_24h": {
          "type": "string",
          "example": "0.1",
          "description": "Currency 24h withdraw limit"
        },
        "withdraw_limit_72h": {
          "type": "string",
          "example": "0.2",
          "description": "Currency 72h withdraw limit"
        },
        "base_factor": {
          "type": "integer",
          "format": "int32",
          "description": "Currency base factor."
        },
        "precision": {
          "type": "integer",
          "format": "int32",
          "description": "Currency precision."
        },
        "position": {
          "type": "integer",
          "format": "int32",
          "description": "Currency position."
        },
        "icon_url": {
          "type": "string",
          "example": "https://upload.wikimedia.org/wikipedia/commons/0/05/Ethereum_logo_2014.svg",
          "description": "Currency icon"
        },
        "min_confirmations": {
          "type": "string",
          "description": "Number of confirmations required for confirming deposit or withdrawal"
        },
        "code": {
          "type": "string",
          "description": "Unique currency code."
        },
        "blockchain_key": {
          "type": "string",
          "description": "Associated blockchain key which will perform transactions synchronization for currency."
        },
        "min_collection_amount": {
          "type": "number",
          "format": "double",
          "description": "Minimal collection amount."
        },
        "visible": {
          "type": "string",
          "description": "Currency display status (true/false)."
        },
        "subunits": {
          "type": "integer",
          "format": "int32",
          "description": "Fraction of the basic monetary unit."
        },
        "options": {
          "type": "json",
          "description": "Currency options."
        },
        "created_at": {
          "type": "string",
          "description": "Currency created time in iso8601 format."
        },
        "updated_at": {
          "type": "string",
          "description": "Currency updated time in iso8601 format."
        }
      },
      "description": "Get list of currencies"
    },
    "Market": {
      "type": "object",
      "properties": {
        "symbol": {
          "type": "string",
          "description": "Unique market ticker symbol. It's always in the form of xxxyyy,where xxx is the base currency code, yyy is the quotecurrency code, e.g. 'btcusd'. All available markets canbe found at /api/v2/markets."
        },
        "name": {
          "type": "string",
          "description": "Market name."
        },
        "type": {
          "type": "string",
          "description": "Market type."
        },
        "base_unit": {
          "type": "string",
          "description": "Market Base unit."
        },
        "quote_unit": {
          "type": "string",
          "description": "Market Quote unit."
        },
        "min_price": {
          "type": "number",
          "format": "double",
          "description": "Minimum order price."
        },
        "max_price": {
          "type": "number",
          "format": "double",
          "description": "Maximum order price."
        },
        "min_amount": {
          "type": "number",
          "format": "double",
          "description": "Minimum order amount."
        },
        "amount_precision": {
          "type": "number",
          "format": "double",
          "description": "Precision for order amount."
        },
        "price_precision": {
          "type": "number",
          "format": "double",
          "description": "Precision for order price."
        },
        "state": {
          "type": "string",
          "description": "Market state defines if user can see/trade on current market."
        },
        "engine_id": {
          "type": "integer",
          "format": "int32",
          "description": "Engine id for this market."
        },
        "position": {
          "type": "integer",
          "format": "int32",
          "description": "Market position."
        },
        "data": {
          "type": "json",
          "description": "Market additional data."
        },
        "created_at": {
          "type": "string",
          "description": "Market created time in iso8601 format."
        },
        "updated_at": {
          "type": "string",
          "description": "Market updated time in iso8601 format."
        }
      },
      "description": "Get all markets, result is paginated."
    },
    "Wallet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique wallet identifier in database."
        },
        "name": {
          "type": "string",
          "description": "Wallet name."
        },
        "kind": {
          "type": "string",
          "description": "Kind of wallet 'deposit','fee','hot','warm' or 'cold'."
        },
        "currencies": {
          "type": "array",
          "items": {
            "type": "string",
            "example": [
              "btc",
              "eth",
              "trst",
              "usd"
            ]
          },
          "description": "Wallet currency code."
        },
        "address": {
          "type": "string",
          "description": "Wallet address."
        },
        "gateway": {
          "type": "string",
          "description": "Wallet gateway."
        },
        "max_balance": {
          "type": "number",
          "format": "double",
          "description": "Wallet max balance."
        },
        "balance": {
          "type": "number",
          "format": "double",
          "description": "Wallet balance"
        },
        "blockchain_key": {
          "type": "string",
          "description": "Wallet blockchain key."
        },
        "status": {
          "type": "string",
          "description": "Wallet status (active/disabled)."
        },
        "created_at": {
          "type": "string",
          "description": "Wallet created time in iso8601 format."
        },
        "updated_at": {
          "type": "string",
          "description": "Wallet updated time in iso8601 format."
        }
      },
      "description": "Get all wallets, result is paginated."
    },
    "Refund": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The refund id"
        },
        "address": {
          "type": "string",
          "description": "Refund address"
        },
        "deposit": {
          "$ref": "#/definitions/Deposit"
        }
      },
      "description": "Creates new crypto refund"
    },
    "Deposit": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique deposit id."
        },
        "currency": {
          "type": "string",
          "description": "Deposit currency id."
        },
        "amount": {
          "type": "number",
          "format": "double",
          "description": "Deposit amount."
        },
        "fee": {
          "type": "number",
          "format": "double",
          "description": "Deposit fee."
        },
        "txid": {
          "type": "string",
          "description": "Deposit transaction id."
        },
        "confirmations": {
          "type": "integer",
          "format": "int32",
          "description": "Number of deposit confirmations."
        },
        "state": {
          "type": "string",
          "description": "Deposit state."
        },
        "transfer_type": {
          "type": "string",
          "description": "Deposit transfer type"
        },
        "created_at": {
          "type": "string",
          "description": "The datetime when deposit was created."
        },
        "completed_at": {
          "type": "string",
          "description": "The datetime when deposit was completed."
        },
        "tid": {
          "type": "string",
          "description": "Deposit tid."
        },
        "member": {
          "type": "string",
          "description": "The member id."
        },
        "uid": {
          "type": "string",
          "description": "Deposit member uid."
        },
        "email": {
          "type": "string",
          "description": "The deposit member email."
        },
        "address": {
          "type": "string",
          "description": "Deposit blockchain address."
        },
        "txout": {
          "type": "integer",
          "format": "int32",
          "description": "Deposit blockchain transaction output."
        },
        "block_number": {
          "type": "integer",
          "format": "int32",
          "description": "Deposit blockchain block number."
        },
        "type": {
          "type": "string",
          "description": "Deposit type (fiat or coin)."
        },
        "spread": {
          "type": "string",
          "description": "Deposit collection spread."
        },
        "updated_at": {
          "type": "string",
          "description": "The datetime when deposit was updated."
        }
      },
      "description": "Returns deposit address for account you want to deposit to by currency and uid."
    },
    "Withdraw": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The withdrawal id."
        },
        "currency": {
          "type": "string",
          "description": "The currency code."
        },
        "type": {
          "type": "string",
          "description": "The withdrawal type"
        },
        "amount": {
          "type": "string",
          "description": "The withdrawal amount"
        },
        "fee": {
          "type": "number",
          "format": "double",
          "description": "The exchange fee."
        },
        "blockchain_txid": {
          "type": "string",
          "description": "The withdrawal transaction id."
        },
        "rid": {
          "type": "string",
          "description": "The beneficiary ID or wallet address on the Blockchain."
        },
        "state": {
          "type": "string",
          "description": "The withdrawal state."
        },
        "confirmations": {
          "type": "integer",
          "format": "int32",
          "description": "Number of confirmations."
        },
        "note": {
          "type": "string",
          "description": "Withdraw note."
        },
        "transfer_type": {
          "type": "string",
          "description": "Withdraw transfer type"
        },
        "created_at": {
          "type": "string",
          "description": "The datetimes for the withdrawal."
        },
        "updated_at": {
          "type": "string",
          "description": "The datetimes for the withdrawal."
        },
        "done_at": {
          "type": "string",
          "description": "The datetime when withdraw was completed"
        },
        "member": {
          "type": "string",
          "description": "The member id."
        },
        "beneficiary": {
          "$ref": "#/definitions/Beneficiary"
        },
        "uid": {
          "type": "string",
          "description": "The withdrawal member uid."
        },
        "email": {
          "type": "string",
          "description": "The withdrawal member email."
        },
        "account": {
          "type": "string",
          "description": "The account code."
        },
        "block_number": {
          "type": "integer",
          "format": "int32",
          "description": "The withdrawal block_number."
        },
        "tid": {
          "type": "string",
          "description": "Withdraw tid."
        },
        "error": {
          "type": "string",
          "description": "Withdraw error."
        },
        "metadata": {
          "type": "string",
          "description": "Optional metadata to be applied to the transaction."
        }
      },
      "description": "Get all withdraws, result is paginated."
    },
    "Trade": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Trade ID."
        },
        "price": {
          "type": "number",
          "format": "double",
          "description": "Trade price."
        },
        "amount": {
          "type": "number",
          "format": "double",
          "description": "Trade amount."
        },
        "total": {
          "type": "number",
          "format": "double",
          "description": "Trade total (Amount * Price)."
        },
        "market": {
          "type": "string",
          "description": "Trade market id."
        },
        "market_type": {
          "type": "string",
          "description": "Market type."
        },
        "created_at": {
          "type": "string",
          "description": "Trade create time in iso8601 format."
        },
        "taker_type": {
          "type": "string",
          "description": "Trade taker order type (sell or buy)."
        },
        "maker_order_email": {
          "type": "string",
          "description": "Trade maker member email."
        },
        "maker_uid": {
          "type": "string",
          "description": "Trade maker member uid."
        },
        "maker_fee": {
          "type": "number",
          "format": "double",
          "description": "Trade maker fee percentage."
        },
        "maker_fee_amount": {
          "type": "number",
          "format": "double",
          "description": "Trade maker fee amount."
        },
        "maker_fee_currency": {
          "type": "string",
          "description": "Trade maker fee currency code."
        },
        "maker_order": {
          "$ref": "#/definitions/Order"
        },
        "taker_order_email": {
          "type": "string",
          "description": "Trade taker member email."
        },
        "taker_uid": {
          "type": "string",
          "description": "Trade taker member uid."
        },
        "taker_fee_currency": {
          "type": "string",
          "description": "Trade taker fee currency code."
        },
        "taker_fee": {
          "type": "number",
          "format": "double",
          "description": "Trade taker fee percentage."
        },
        "taker_fee_amount": {
          "type": "number",
          "format": "double",
          "description": "Trade taker fee amount."
        },
        "taker_order": {
          "$ref": "#/definitions/Order"
        }
      },
      "description": "Get all trades, result is paginated."
    },
    "Member": {
      "type": "object",
      "properties": {
        "uid": {
          "type": "string",
          "description": "Member UID."
        },
        "email": {
          "type": "string",
          "description": "Member email."
        },
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Account"
          },
          "description": "Member accounts."
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique member identifier in database."
        },
        "level": {
          "type": "integer",
          "format": "int32",
          "description": "Member's level."
        },
        "role": {
          "type": "string",
          "description": "Member's role."
        },
        "group": {
          "type": "string",
          "description": "Member's group."
        },
        "state": {
          "type": "string",
          "description": "Member's state."
        },
        "created_at": {
          "type": "string",
          "description": "Member created time in iso8601 format."
        },
        "updated_at": {
          "type": "string",
          "description": "Member updated time in iso8601 format."
        },
        "beneficiaries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Beneficiary"
          },
          "description": "Member Beneficiary."
        },
        "deposit_addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentAddress"
          },
          "description": "Member deposits addresses"
        }
      },
      "description": "Get all members, result is paginated."
    },
    "Account": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string",
          "description": "Currency code."
        },
        "balance": {
          "type": "number",
          "format": "double",
          "description": "Account balance."
        },
        "locked": {
          "type": "number",
          "format": "double",
          "description": "Account locked funds."
        },
        "deposit_address": {
          "$ref": "#/definitions/PaymentAddress",
          "description": "User deposit address"
        }
      }
    },
    "PaymentAddress": {
      "type": "object",
      "properties": {
        "currencies": {
          "type": "array",
          "items": {
            "type": "string",
            "example": [
              "btc",
              "eth",
              "trst",
              "usd"
            ]
          },
          "description": "Currencies codes."
        },
        "address": {
          "type": "string",
          "description": "Payment address."
        },
        "state": {
          "type": "string",
          "description": "Payment address state."
        }
      }
    },
    "TradingFee": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique trading fee table identifier in database."
        },
        "group": {
          "type": "string",
          "description": "Member group for define maker/taker fee."
        },
        "market_id": {
          "type": "string",
          "description": "Market id for define maker/taker fee."
        },
        "market_type": {
          "type": "string",
          "description": "Market type."
        },
        "maker": {
          "type": "number",
          "format": "double",
          "description": "Market maker fee."
        },
        "taker": {
          "type": "number",
          "format": "double",
          "description": "Market taker fee."
        },
        "created_at": {
          "type": "string",
          "description": "Trading fee table created time in iso8601 format."
        },
        "updated_at": {
          "type": "string",
          "description": "Trading fee table updated time in iso8601 format."
        }
      },
      "description": "Returns trading_fees table as paginated collection"
    },
    "Engine": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Engine uniq id"
        },
        "name": {
          "type": "string",
          "description": "Engine name"
        },
        "driver": {
          "type": "string",
          "description": "Engine driver"
        },
        "uid": {
          "type": "string",
          "description": "Owner of a engine"
        },
        "state": {
          "type": "string",
          "description": "Engine state"
        }
      },
      "description": "Get all engine, result is paginated."
    },
    "WithdrawLimit": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique withdraw limit table identifier in database."
        },
        "group": {
          "type": "string",
          "description": "Member group for define withdraw limits."
        },
        "kyc_level": {
          "type": "string",
          "description": "KYC level for define withdraw limits."
        },
        "limit_24_hour": {
          "type": "number",
          "format": "double",
          "description": "24 hours withdraw limit."
        },
        "limit_1_month": {
          "type": "number",
          "format": "double",
          "description": "1 month withdraw limit."
        },
        "created_at": {
          "type": "string",
          "description": "Withdraw limit table created time in iso8601 format."
        },
        "updated_at": {
          "type": "string",
          "description": "Withdraw limit table updated time in iso8601 format."
        }
      },
      "description": "Returns withdraw limits table as paginated collection"
    },
    "InternalTransfer": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string",
          "description": "The currency code."
        },
        "sender_username": {
          "type": "string",
          "description": "The internal transfer sender."
        },
        "receiver_username": {
          "type": "string",
          "description": "The internal transfer receiver."
        },
        "sender_uid": {
          "type": "string",
          "description": "The internal transfer sender."
        },
        "receiver_uid": {
          "type": "string",
          "description": "The internal transfer receiver."
        },
        "direction": {
          "type": "string",
          "description": "The internal transfer direction (incoming or outcoming internal transfer)."
        },
        "amount": {
          "type": "number",
          "format": "double",
          "description": "Internal transfer Amount."
        },
        "status": {
          "type": "string",
          "description": "The internal transfer state."
        },
        "created_at": {
          "type": "string",
          "description": "The datetimes for the internal transfer."
        },
        "updated_at": {
          "type": "string",
          "description": "The datetimes for the internal transfer."
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Internal transfer uniq id"
        }
      },
      "description": "Get all internal transfers."
    },
    "WhitelistedSmartContract": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique whitelisted smart contract identifier in database."
        },
        "address": {
          "type": "string",
          "description": "Whitelisted smart contract address."
        },
        "description": {
          "type": "string",
          "description": "Whitelisted smart contract description."
        },
        "blockchain_key": {
          "type": "string",
          "description": "Whitelisted smart contract blockchain key."
        },
        "state": {
          "type": "string",
          "description": "Whitelisted smart contract status (active/disabled)."
        },
        "created_at": {
          "type": "string",
          "description": "Whitelisted smart contract created time in iso8601 format."
        },
        "updated_at": {
          "type": "string",
          "description": "Whitelisted smart contract updated time in iso8601 format."
        }
      },
      "description": "Get a whitelisted address."
    }
  }
}
